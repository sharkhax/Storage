import org.jetbrains.annotations.Contract;
import org.jetbrains.annotations.NotNull;

import java.util.*;

import static java.lang.Character.isDigit;

public class Airport {
    private static final int MAX_NUMBER_OF_EMPLOYEES = 10;
    private static final String NEXT_MESSAGE_OF_MAIN_MENU = "Choose what do you want to do:\n0. Exit\n" +
            "1. Add new plane\n2. Add new employee\n3. Add new flight\n4. Show flights\nEnter number: ";
    private static final String FIRST_MESSAGE_OF_MAIN_MENU = "Welcome to the airport named after Vladosss. " +
            NEXT_MESSAGE_OF_MAIN_MENU;
    private static final String DIVIDING_LINE = "\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n";
    private static final String ENTERING_CANCEL_MESSAGE = "Entering is canceled, back to the main menu.";
    private static final String FLIGHTS_LIST_IS_EMPTY_MESSAGE = "No flights, list is empty.";

    private static Employee[] employeesList = new Employee[MAX_NUMBER_OF_EMPLOYEES];
    static Map<String, Plane> planesList = new HashMap<>();
    private static List<Flight> flightsList = new ArrayList<>();
    private static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        short ans;
        boolean start = false;

        System.out.println(FIRST_MESSAGE_OF_MAIN_MENU);
        while (true) {
            if (start)
                System.out.println(DIVIDING_LINE + NEXT_MESSAGE_OF_MAIN_MENU);
            start = true;
            ans = scanner.nextShort();
            while (ans > 4 || ans < 0) {
                System.out.println("Vvedite correct number (0-4): ");
                ans = scanner.nextShort();
            }
            switch (ans) {
                case (1): {
                    addPlane();
                    break;
                }
                case (2): {
                    addEmployee();
                    break;
                }
                case (3): {
                    addFlight();
                    break;
                }
                case (4): {
                    showFlights();
                    break;
                }
                case (0): {
                    scanner.close();
                    System.exit(0);
                    break;
                }
                default: {
                    System.out.println("Smth wrong, closing program");
                    scanner.close();
                    System.exit(1);
                }
            }
        }
    }

    private static void addEmployee() {
        int i = 0;

        while (i < employeesList.length && employeesList[i] != null)
            i++;
        if (i == employeesList.length) {
            System.out.println("Sorry, but there is no vacant places =(");
            return;
        }

        String name = inputString("name", "employee");
        if (exitCheck(name)) return;

        String surname = inputString("surname", "employee");
        if (exitCheck(surname)) return;

        String position = inputString("position", "employee");
        if (exitCheck(position)) return;

        int age = inputInt("age", "employee", false);
        while (true) {
            if (exitCheck(age)) return;
            if (age < 18) {
                System.out.println("Incorrect value, employee should be 18+, retry (0 for exit): ");
                age = inputInt(null, null, true);
            } else break;
        }

        employeesList[i] = new Employee(name, surname, position, age);
        successfullyAddedMessage("employee");
    }

    private static void addPlane() {
        String mark = inputString("mark", "plane");
        if (exitCheck(mark)) return;

        String key = inputString("number", "plane");
        while (true) {
            if (exitCheck(key)) return;
            if (planesList.containsKey(key)) {
                System.out.println("This plane is already exists, retry (0 for exit): ");
                key = scanner.next();
            } else break;
        }

        double weight = inputDouble("weight", "plane", false);
        while (true) {
            if (exitCheck(weight)) return;
            if (negativeCheck(weight)) {
                weight = inputDouble(null, null, true);
            } else break;
        }

        int capacity = inputInt("capacity", "plane", false);
        while (true) {
            if (exitCheck(capacity)) return;
            if (negativeCheck(capacity)) {
                capacity = inputInt(null, null, true);
            } else break;
        }

        planesList.put(key, new Plane(mark, weight, capacity, key, true));
        successfullyAddedMessage("plane");
    }

    private static void addFlight() {
        int takenSeats;
        String stringDate, key;

        System.out.println("Enter number of the plane which will fly (0 for exit): ");
        while (true) {
            key = scanner.next();
            if (exitCheck(key)) return;
            if (!planesList.containsKey(key)) {
                System.out.println("There is no plane like this, retry (0 for exit): ");
                if (exitCheck(key)) return;
            } else if (planesList.get(key).getVacant()) {
                planesList.get(key).setVacant(false);
                break;
            } else System.out.println("Chosen plane isn't vacant, retry (0 for exit): ");
        }

        System.out.println("Enter number of the taken seats (-1 for exit): ");
        while (true) {
            takenSeats = scanner.nextInt();
            if (takenSeats < -1) {
                System.out.println("Wrong value, shouldn't be negative, retry (-1 for exit): ");
            } else if (takenSeats == -1) {
                System.out.println(ENTERING_CANCEL_MESSAGE);
                return;
            } else if (planesList.get(key).getCapacity() < takenSeats) {
                System.out.println("Error, the capacity of the plane is less than the number of taken seats. " +
                        "Retry (-1 for exit): ");
            } else break;
        }

        System.out.println("Enter date of the flight in format dd/mm/yyyy (0 for exit): ");
        stringDate = scanner.next();
        if (exitCheck(stringDate)) return;
        DateCheckResult date = dateFormatCheck(stringDate);
        if (!date.isResult()) return;

        flightsList.add(new Flight(key, takenSeats, date.getDate()));
        successfullyAddedMessage("flight");
    }

    private static void showFlights() {
        if (flightsList.isEmpty()) {
            System.out.println(FLIGHTS_LIST_IS_EMPTY_MESSAGE);
            return;
        }
        System.out.println("\n");
        Collections.sort(flightsList);
        for (Flight buffer : flightsList) {
            System.out.println(buffer.toString());
        }
    }

    private static <t> boolean exitCheck(t ans) {
        if (ans.equals(0.0) || ans.equals("0") || ans.equals(0)) {
            System.out.println(ENTERING_CANCEL_MESSAGE);
            return true;
        } else return false;
    }

    private static int inputInt(String value, String className, boolean noMessage) throws InputMismatchException {
        boolean isCaught = false;
        int input = -1;
        if(!noMessage)
        System.out.println("Enter " + value + " of the " + className + " (0 for exit): ");
        do {
            try {
                input = scanner.nextInt();
                isCaught = false;
            } catch (InputMismatchException e) {
                System.out.println("Wrong value, retry (0 for exit): ");
                scanner.next();
                isCaught = true;
            }
        } while (isCaught);
        return input;
    }

    private static double inputDouble(String value, String className, boolean noMessage) throws InputMismatchException {
        double input = -1;
        boolean isCaught = false;
        if (!noMessage)
        System.out.println("Enter " + value + " of the " + className + " (0 for exit): ");
        do {
            try {
                input = scanner.nextDouble();
                isCaught = false;
            } catch (InputMismatchException e) {
                System.out.println("Wrong value, retry (0 for exit): ");
                scanner.next();
                isCaught = true;
            }
        } while (isCaught);
        return input;
    }

    private static String inputString(String value, String className) {
        System.out.println("Enter " + value + " of the " + className + " (0 for exit): ");
        return scanner.next();
    }

    private static boolean negativeCheck(int value) {
        if (value < 0) {
            System.out.println("Wrong value, should be positive, retry (0 for exit): ");
            return true;
        } else return false;
    }

    private static boolean negativeCheck(double value) {
        if (value < 0.0) {
            System.out.println("Wrong value, should be positive, retry (0 for exit): ");
            return true;
        } else return false;
    }

    private static void successfullyAddedMessage(String value) {
        System.out.println("The " + value + " is successfully added.");
    }

    private static DateCheckResult dateFormatCheck(String stringDate) {
        boolean start = false;
        int dd, mm, yyyy;

        while (true) {
            if (start) {
                wrongFormatMessage();
                stringDate = scanner.next();
                if (exitCheck(stringDate)) return new DateCheckResult(false, null);
            }
            start = true;
            while (true) {
                if (stringDate.length() == 10)
                    if (stringDate.charAt(2) == '/' && stringDate.charAt(5) == '/')
                        if (isDigit(stringDate.charAt(0)) && isDigit(stringDate.charAt(1))
                                && isDigit(stringDate.charAt(3)) && isDigit(stringDate.charAt(4))
                                && isDigit(stringDate.charAt(6)) && isDigit(stringDate.charAt(7))
                                && isDigit(stringDate.charAt(8)) && isDigit(stringDate.charAt(9)))
                            break;
                wrongFormatMessage();
                stringDate = scanner.next();
                if (exitCheck(stringDate)) return new DateCheckResult(false, null);
            }

            dd = Integer.parseInt(stringDate.substring(0, 2));
            mm = Integer.parseInt(stringDate.substring(3, 5));
            yyyy = Integer.parseInt(stringDate.substring(6, 10));
            if (dd > 0 && dd <= 31 && mm > 0 && mm <= 12 && yyyy >= 0) {
                if (mm == 4 || mm == 6 || mm == 9 || mm == 11) {
                    if (dd == 31) continue; // ne ok
                } else if (dd > 28 && mm == 2 && yyyy % 4 != 0) {
                    continue; // vse ok
                } else if (dd > 29 && mm == 2) continue; // vse ok
                break;
            }
        }
        return new DateCheckResult(true, new GregorianCalendar(yyyy, mm - 1, dd));
    }

    private static void wrongFormatMessage() {
        System.out.println("Wrong format (dd/mm/yyyy), retry (0 for exit): ");
    }
}